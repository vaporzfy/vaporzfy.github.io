<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hello, Julia</title>
      <link href="/2018/08/14/julia/basics/Hello,%20Julia/"/>
      <url>/2018/08/14/julia/basics/Hello,%20Julia/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-08-14<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:julia@1.0.0" target="_blank" rel="noopener">julia@1.0.0</a><br><a href="mailto:atom@1.29.0" target="_blank" rel="noopener">atom@1.29.0</a><br><a href="mailto:julia-client@0.7.3" target="_blank" rel="noopener">julia-client@0.7.3</a><br><strong>参考：</strong><br><a href="http://arcade.academy/" target="_blank" rel="noopener">arcade</a><br><strong>分类：</strong> julia &gt; basics</p></blockquote><hr><h2 id="1-Julia简介"><a href="#1-Julia简介" class="headerlink" title="1. Julia简介"></a>1. Julia简介</h2><p>2018.08.12 Julia-v1.0.0发布，据传很厉害的样子，以下摘自官网的解读：</p><ul><li>开源</li><li>它是交互式的，具备可编译性</li><li>拥有 C 的速度</li><li>拥有 Ruby 的灵活</li><li>像 Lisp 这样真正的宏</li><li>有像 Matlab 这样的浅显熟悉的数学符号</li><li>像 Matlab 一样强大的线性代数</li><li>像 Python 一样可用于通用编程</li><li>像 R 一样易于统计</li><li>像 Perl 一样自然地用于字符串处理</li><li>像 shell 一样擅长将程序粘合在一起的语言</li></ul><p>强不强？强不强？  以下是官方介绍的使用场景：</p><img src="http://pbontyvwb.bkt.clouddn.com/images/julia/basics/julia-use.png"><p>强不强，我目前还不知道，不过衷心希望它以后能变强，我只是好奇的尝鲜了一下，暂时还不打算学，以下是Julia的第一个程序。</p><hr><h2 id="2-Julia安装"><a href="#2-Julia安装" class="headerlink" title="2. Julia安装"></a>2. Julia安装</h2><p>使用brew安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install julia</span><br></pre></td></tr></table></figure><hr><h2 id="3-Juno安装"><a href="#3-Juno安装" class="headerlink" title="3. Juno安装"></a>3. Juno安装</h2><p>二进制文件安装完成之后，接下来安装ide，以下是官网介绍的几种ide：</p><img src="http://pbontyvwb.bkt.clouddn.com/images/julia/basics/julia-ide.png"><p>我尝试安装了<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a>和<a href="https://atom.io/" target="_blank" rel="noopener">atom</a>的插件，最终在atom下顺利运行。</p><ul><li><p>vscode的julia插件：<a href="https://github.com/JuliaEditorSupport/julia-vscode" target="_blank" rel="noopener">julia</a></p></li><li><p>atom的julia插件：<a href="http://junolab.org/" target="_blank" rel="noopener">juno</a></p></li></ul><p>以下开始介绍juno的安装（已汉化的atom）：</p><ol><li><p>打开atom，点击Atom ▸ 首选项 ▸ 安装</p> <img src="http://pbontyvwb.bkt.clouddn.com/images/julia/basics/julia-client.png"></li><li><p>在图中的搜索框中输入“julia”，然后回车，在列出的选项中选择“julia-client”，点击安装</p> <img src="http://pbontyvwb.bkt.clouddn.com/images/julia/basics/julia-client2.png"><p> 耐心等待安装完成即可。</p></li></ol><hr><h2 id="4-Hello-World"><a href="#4-Hello-World" class="headerlink" title="4. Hello, World"></a>4. Hello, World</h2><ol><li><p>新建一个文件，命名为hello.jl，使用atom打开，文件内容如下：</p> <figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="string">"Hello, world!"</span>)</span><br><span class="line">println(<span class="number">1</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>单击菜单栏的julia ▸ Open console ，然后在下侧的终端区，回车，进入Julia。</p> <img src="http://pbontyvwb.bkt.clouddn.com/images/julia/basics/julia-hello1.png"> <img src="http://pbontyvwb.bkt.clouddn.com/images/julia/basics/julia-hello2.png"></li><li><p>单击菜单栏的julia ▸ Run File ，此时下方的终端区就能看到运行结果。</p> <img src="http://pbontyvwb.bkt.clouddn.com/images/julia/basics/julia-hello3.png"> <img src="http://pbontyvwb.bkt.clouddn.com/images/julia/basics/julia-hello4.png"></li></ol><p>(完)</p>]]></content>
      
      <categories>
          
          <category> julia </category>
          
          <category> basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> julia </tag>
            
            <tag> juno </tag>
            
            <tag> atom </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>turtle colorstring</title>
      <link href="/2018/08/13/python/library/turtle/turtle%20colorstring/"/>
      <url>/2018/08/13/python/library/turtle/turtle%20colorstring/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-08-13<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:python@3.6.5" target="_blank" rel="noopener">python@3.6.5</a><br><strong>参考：</strong><br> <a href="https://docs.python.org/3.6/library/turtle.html?highlight=turtle" target="_blank" rel="noopener">turtle</a><br><strong>分类：</strong> python &gt; library</p></blockquote><hr><p>看过官方文档的人都知道，在官方的文档中找不到关于颜色字符串的更多描述，我们不禁会发问，我到底能使用哪些颜色字符串呢？</p><p>曾经的我也有过上述疑惑，但是没有思路解决（不影响使用，懒得去管，使用rgb模式总没问题吧！），最近突然做了一个大胆的猜测，turtle是不是跟tk有什么关系呢？于是得到以下解决办法：</p><p>turtle是基于tk而写的，颜色遂取自于tk，颜色字符串列表如下：<br><a href="http://www.tcl.tk/man/tcl8.5/TkCmd/colors.htm" target="_blank" rel="noopener">http://www.tcl.tk/man/tcl8.5/TkCmd/colors.htm</a></p><p>python-tk官网：<br><a href="https://docs.python.org/3/library/tkinter.html" target="_blank" rel="noopener">https://docs.python.org/3/library/tkinter.html</a><br>tk文档：<br><a href="https://tkdocs.com/tutorial/index.html" target="_blank" rel="noopener">https://tkdocs.com/tutorial/index.html</a><br>tk颜色模块：<br><a href="https://tkdocs.com/tutorial/fonts.html#colors" target="_blank" rel="noopener">https://tkdocs.com/tutorial/fonts.html#colors</a><br>tk具体颜色列表:<br><a href="http://www.tcl.tk/man/tcl8.5/TkCmd/colors.htm" target="_blank" rel="noopener">http://www.tcl.tk/man/tcl8.5/TkCmd/colors.htm</a><br>部分颜色在线选择：<br><a href="http://tool.oschina.net/commons?type=3" target="_blank" rel="noopener">http://tool.oschina.net/commons?type=3</a></p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
          <category> library </category>
          
      </categories>
      
      
        <tags>
            
            <tag> turtle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>绘制microbit</title>
      <link href="/2018/06/11/python/icode/%E7%BB%98%E5%88%B6microbit/"/>
      <url>/2018/06/11/python/icode/%E7%BB%98%E5%88%B6microbit/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-06-11<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:python@3.6.5" target="_blank" rel="noopener">python@3.6.5</a><br><a href="mailto:arcade@1.3.4" target="_blank" rel="noopener">arcade@1.3.4</a><br><strong>参考：</strong><br><a href="http://arcade.academy/" target="_blank" rel="noopener">arcade</a><br><strong>分类：</strong> python &gt; icode</p></blockquote><hr><h2 id="1-示例代码"><a href="#1-示例代码" class="headerlink" title="1. 示例代码"></a>1. 示例代码</h2><p>偶然看到以前写的代码，使用arcade模块绘制的microbit图形，挺好看的，安利一波。</p><p>arcade是一个2d游戏库，当然也可以用来绘制图形，它是基于pyglet而编写的，与传统的2d游戏库一霸pygame相比，个人觉得最突出的就是：</p><ul><li>完善的官网文档和大量的示例</li><li>友好的api</li><li>代码与逻辑相分离的结构</li></ul><p><a href="http://arcade.academy/pygame_comparison.html" target="_blank" rel="noopener">更多与pygame相比的优势，详见官方</a></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> arcade</span><br><span class="line"></span><br><span class="line">SCREEN_WIDTH = <span class="number">800</span></span><br><span class="line">SCREEN_HEIGHT = <span class="number">600</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_bit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># bg</span></span><br><span class="line">    arcade.draw_rectangle_filled(</span><br><span class="line">        SCREEN_WIDTH / <span class="number">2</span>, SCREEN_HEIGHT / <span class="number">2</span>, <span class="number">400</span>, <span class="number">300</span>, arcade.color.BLACK</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 200, 450</span></span><br><span class="line">    arcade.draw_triangle_filled(<span class="number">200</span>, <span class="number">450</span>, <span class="number">200</span>, <span class="number">370</span>, <span class="number">280</span>, <span class="number">450</span>, arcade.color.PINK)</span><br><span class="line">    arcade.draw_triangle_filled(<span class="number">280</span>, <span class="number">450</span>, <span class="number">280</span>, <span class="number">400</span>, <span class="number">330</span>, <span class="number">450</span>, arcade.color.PINK)</span><br><span class="line">    arcade.draw_triangle_filled(<span class="number">330</span>, <span class="number">450</span>, <span class="number">330</span>, <span class="number">420</span>, <span class="number">360</span>, <span class="number">450</span>, arcade.color.PINK)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 400, 400</span></span><br><span class="line">    arcade.draw_ellipse_outline(<span class="number">400</span>, <span class="number">400</span>, <span class="number">30</span>, <span class="number">15</span>, arcade.color.PINK, <span class="number">10</span>)</span><br><span class="line">    arcade.draw_circle_filled(<span class="number">390</span>, <span class="number">400</span>, <span class="number">5</span>, arcade.color.PINK)</span><br><span class="line">    arcade.draw_circle_filled(<span class="number">410</span>, <span class="number">400</span>, <span class="number">5</span>, arcade.color.PINK)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 250, 300</span></span><br><span class="line">    arcade.draw_rectangle_filled(<span class="number">250</span>, <span class="number">300</span>, <span class="number">30</span>, <span class="number">30</span>, arcade.color.GRAY)</span><br><span class="line">    arcade.draw_rectangle_filled(<span class="number">550</span>, <span class="number">300</span>, <span class="number">30</span>, <span class="number">30</span>, arcade.color.GRAY)</span><br><span class="line">    arcade.draw_circle_filled(<span class="number">250</span>, <span class="number">300</span>, <span class="number">10</span>, arcade.color.BLACK)</span><br><span class="line">    arcade.draw_circle_filled(<span class="number">550</span>, <span class="number">300</span>, <span class="number">10</span>, arcade.color.BLACK)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 200, 150</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        arcade.draw_circle_filled(<span class="number">240</span> + i * <span class="number">80</span>, <span class="number">200</span>, <span class="number">15</span>, arcade.color.WHITE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 340, 260</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            arcade.draw_rectangle_filled(</span><br><span class="line">                <span class="number">340</span> + i * <span class="number">30</span>, <span class="number">240</span> + j * <span class="number">30</span>, <span class="number">3</span>, <span class="number">10</span>, arcade.color.RED</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This is the main program.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Open the window</span></span><br><span class="line">    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, <span class="string">"microbit"</span>)</span><br><span class="line"></span><br><span class="line">    arcade.set_background_color(arcade.color.WHITE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Start the render process. This must be done before any drawing commands.</span></span><br><span class="line">    arcade.start_render()</span><br><span class="line"></span><br><span class="line">    draw_bit()</span><br><span class="line"></span><br><span class="line">    arcade.finish_render()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Keep the window up until someone closes it.</span></span><br><span class="line">    arcade.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><img src="http://pbontyvwb.bkt.clouddn.com/images/python/icode/microbit.png"><hr><h2 id="2-可能遇到的错误"><a href="#2-可能遇到的错误" class="headerlink" title="2. 可能遇到的错误"></a>2. 可能遇到的错误</h2><p>在使用anaconda运行，如果遇到报错以下报错信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named <span class="string">'future'</span></span><br></pre></td></tr></table></figure></p><p>解决办法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install future</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：是conda不是pip，即使pip安装成功，也是不可用的。</strong></p></blockquote><p>（完）</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
          <category> icode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arcade </tag>
            
            <tag> microbit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python动态绑定方法</title>
      <link href="/2018/06/03/python/advance/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/03/python/advance/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-06-03<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:python@3.6.5" target="_blank" rel="noopener">python@3.6.5</a><br><strong>参考：</strong><br><strong>分类：</strong> python &gt; advance</p></blockquote><hr><p>简单介绍一下我的一种使用场景，某一个复杂的知名库，我想往类中添加新方法，但是奈何它的构建比较复杂，而我此时并不关心这个库的内部结构，只想尽快的在某个类中添加进去我想要添加的方法，这时候怎么办呢？</p><p><strong>那就是动态的给类添加方法。</strong></p><hr><h2 id="1-运行过程中给类添加方法"><a href="#1-运行过程中给类添加方法" class="headerlink" title="1. 运行过程中给类添加方法"></a>1. 运行过程中给类添加方法</h2><p>动态添加属性很简单，此处不讲解。</p><p>下面直接上代码，我想动态的给Cat类添加一个sleep方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType  <span class="comment"># &lt;1&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, color)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'喵喵喵'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给Cat类添加sleep方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span>  <span class="comment"># &lt;2&gt;</span></span><br><span class="line">    print(<span class="string">'呼呼呼'</span>)</span><br><span class="line"></span><br><span class="line">Cat.sleep = MethodType(sleep, Cat)  <span class="comment"># &lt;3&gt;</span></span><br></pre></td></tr></table></figure><p><1> 需要使用types模块中的MethodType方法</1></p><p><2> self是必要的参数，这里与在类中定义无异</2></p><p><3> 核心代码，一看就会，不用解释</3></p><h2 id="2-运行过程中删除方法"><a href="#2-运行过程中删除方法" class="headerlink" title="2. 运行过程中删除方法"></a>2. 运行过程中删除方法</h2><p>直接上代码，来介绍添加的逆操作，动态删除属性和方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, color)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'喵喵喵'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给Cat类添加sleep方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span>  </span><br><span class="line">    print(<span class="string">'呼呼呼'</span>)</span><br><span class="line"></span><br><span class="line">Cat.sleep = MethodType(sleep, Cat) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态删除Cat类中的sleep方法</span></span><br><span class="line"><span class="comment"># 删除方法一</span></span><br><span class="line"><span class="keyword">del</span> Cat.sleep  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除方法二</span></span><br><span class="line">delattr(Cat, <span class="string">'sleep'</span>)</span><br></pre></td></tr></table></figure><p>两种删除方法效果一致。</p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
          <category> advance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>90%的PEP8</title>
      <link href="/2018/05/16/python/advance/pep8/"/>
      <url>/2018/05/16/python/advance/pep8/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-05-16<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:python@3.6.5" target="_blank" rel="noopener">python@3.6.5</a><br><strong>参考：</strong><br><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP9</a><br><a href="https://book.douban.com/subject/26709315/" target="_blank" rel="noopener">《Effective Python》</a><br><strong>分类：</strong> python &gt; advance</p><hr><p>优美的代码不但使人愉悦，还能体现书写者的水平，很多求职者的简历上都会写上“良好的代码风格”，我通常会问“怎么体现良好的代码风格？”</p><p>这时候多半都是举例陈述，其实，你只需要告诉我，你的代码风格遵循PEP8提议即可。</p><p>笔记绝大部分内容来自于PEP8，只摘取了个人觉得重要的部分。</p><hr><h2 id="1-空白"><a href="#1-空白" class="headerlink" title="1. 空白"></a>1. 空白</h2><ol><li>使用space（空格）来表示缩进，而不要使用tab（制表符）。<br>  （因为不同的系统tab的空格数可能会有所不同）</li><li><p>和语法相关的每一层缩进都用4个空格来表示<br> 每行的字符不应超过79个</p></li><li><p>对于占据多行的长表达式来说，除了首行之外的其余各行都应该在通常的缩进级别之上再加4个空格</p></li><li>文件中的函数与类之间应该用2个空行隔开</li><li>在同一类中，各方法之间应该用2个空行隔开</li><li>在使用下标来获取列表元素，调用函数或给关键字参数赋值的时候，不要在两旁添加空格。</li><li>为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且各写一个就好。</li></ol><hr><h2 id="2-命名"><a href="#2-命名" class="headerlink" title="2. 命名"></a>2. 命名</h2><ol><li>函数、变量及属性应该用小写字母来拼写，各单词之间以下划线相连</li><li>受保护的实例属性，应该以单一下划线开头</li><li>私有的实例属性，应该以单一下划线开头</li><li>类与异常，应该以每个单词首字母均大写的形式来命名</li><li>模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线相连</li><li>类中的实例方法（instance method）应该把首个参数命名为self，以表示该对象对象</li><li>类方法（class method）的首个参数，应该命名为cls，以表示该类自身。</li></ol><hr><h2 id="3-表达式和语句"><a href="#3-表达式和语句" class="headerlink" title="3. 表达式和语句"></a>3. 表达式和语句</h2><ol><li><p>采用内联形式的否定词，而不是把否定词放在整个表达式前面。例如：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a <span class="keyword">is</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐的写法</span></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> b</span><br></pre></td></tr></table></figure></li><li><p>不要通过检测长度方法（如if len(somelist) == 0）来判断somelist是否为[]或’’等空值，而是应该采用if not somelist，这种写法来判断，它会假定：空值会自动被评估为False。        </p></li><li><p>检测somelist是否为非空值时，也应如此，if somelist语句默认会把非空的值判断为True。</p></li><li><p>不要写单行的if、for、while以及except复合语句，而是应该把这些语句分为多行来写，以示清晰。                </p></li><li><p>import语句应该放在文件开头。</p></li><li><p>引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用绝对名称，例如，引入bar中的foo模块时：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐的写法</span></span><br><span class="line"><span class="keyword">from</span> bar <span class="keyword">import</span> foo</span><br></pre></td></tr></table></figure></li><li><p>如果非要采用相对名称来写import语句，那应该采用明确的写法：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> foo</span><br></pre></td></tr></table></figure></li><li><p>import语句应该分为三部分，分别表示标准库模块、第三方模块以及自用模块，在每一个部分之中，各import语句应该按模块字母顺序来排列。</p></li><li><p>一个import语句只导入一个模块，以示清晰</p></li><li><p>同一个程序中存在同名对象时，比如unit模块中存在方法foo，bar模块中也存在方法foo，采用以下两种方式解决。</p><blockquote><p>import方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bar</span><br><span class="line"><span class="keyword">import</span> unit</span><br><span class="line"></span><br><span class="line">bar.foo()</span><br><span class="line">unit.foo()</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>as方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bar <span class="keyword">import</span> foo <span class="keyword">as</span> bfoo</span><br><span class="line"><span class="keyword">from</span> unit <span class="keyword">import</span> foo <span class="keyword">as</span> ufoo</span><br><span class="line">  </span><br><span class="line">bfoo()</span><br><span class="line">ufoo()</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-函数、类和模块"><a href="#4-函数、类和模块" class="headerlink" title="4. 函数、类和模块"></a>4. 函数、类和模块</h2><p>这部分是我自己添加的，仅供借鉴。</p><ol><li><p>函数注释</p><p> 参考<br> <a href="https://docs.python.org/3/tutorial/controlflow.html#function-annotations" target="_blank" rel="noopener">官方文档4.7.7. Function Annotations</a></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typing  <span class="comment"># &lt;1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">textinput</span><span class="params">(self, title: str, info: str)</span> -&gt; typing.Tuple[input, bool]:</span>  <span class="comment"># &lt;2&gt;</span></span><br><span class="line">    text, ok = QInputDialog.getText(<span class="keyword">None</span>, title, info)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text, ok</span><br></pre></td></tr></table></figure><p> <1> 用于注释除int、float和str类型以外的类型<br> <2> 因为tuple为内置函数，所以借助typing进行注释，另外函数注释以字典的形式保存在__annotations__中。</2></1></p></li><li><p>文档字符串</p><p> 文档字符串又称docstring，这个是我觉得很有必要的部分，python内置的文档字符串可以通过__doc__访问得到，help()方法也可以查看文档字符串。</p><ul><li><p>模块字符串</p><p>docstring的头一行，应该是一句话，用来描述本模块的用途。</p><p>它下面的那段话，应该包含一些细节信息，把与本模块操作相关的内容，告诉模块的使用者。</p></li><li><p>类字符串</p><p>docstring的头一行，一句话说明本类的用途。</p><p>它下面的那段话，详述类的操作方式。<br>类中比较重要的public属性及方法，也应该在docstring中加以强调。<br>此外，应该告诉子类实现者，如何才能正确地与protected属性及超类方法相交互。</p></li><li><p>函数字符串</p><p>docstring的头一行，一句话说明本函数的功能。</p><p>接下来用一段话描述函数的具体行为和函数的参数。如果函数没有返回值，则不要出现“return None”这样的说法。</p></li></ul></li></ol><p>（完）</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
          <category> advance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pep8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>playsound简介</title>
      <link href="/2018/05/13/python/library/playsound/playsound%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/05/13/python/library/playsound/playsound%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-05-13<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:python@3.6.5" target="_blank" rel="noopener">python@3.6.5</a><br><a href="mailto:playsound@1.2.2" target="_blank" rel="noopener">playsound@1.2.2</a><br><strong>参考：</strong><br> <a href="https://pypi.org/project/playsound/" target="_blank" rel="noopener">playsound</a><br><strong>分类：</strong> python &gt; library</p></blockquote><hr><p>如果你有尝试找过python中播放音频的库，你会发现很多的库都很陈旧，或者仅支持最基本的wav、ogg等格式，一旦需要支持更多的格式，则需要额外的支持工具。</p><p>然而，经过我的不懈努力，终于找到一个不需要手动额外安装额外工具的库，那就是playsound。（其实它还是依赖于avbin）</p><hr><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install playsound</span><br></pre></td></tr></table></figure><h2 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> playsound <span class="keyword">import</span> playsound</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">playsound(<span class="string">'/path/to/a/sound/file/you/want/to/play.mp3'</span>)</span><br><span class="line">sleep(<span class="number">200</span>)  <span class="comment"># &lt;1&gt;</span></span><br></pre></td></tr></table></figure><p><1> 注意：一定要加延时，否则程序一闪而过</1></p><hr><h2 id="3-Mac下的问题"><a href="#3-Mac下的问题" class="headerlink" title="3. Mac下的问题"></a>3. Mac下的问题</h2><p>上述的示例代码在Windows下完美运行，但是在Mac下则会出现以下错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> AppKit <span class="keyword">import</span> NSSound ModuleNotFoundError: No module named <span class="string">'AppKit'</span></span><br></pre></td></tr></table></figure><p>当时天真的逐步溯源解决，发现一直解决不完，总有新的错误信息出现。</p><p>最终的完美解决办法：安装模块pyobjc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyobjc</span><br></pre></td></tr></table></figure><p><a href="https://pythonhosted.org/pyobjc/" target="_blank" rel="noopener">pyobjc</a>项目旨在提供Python和Objective-C编程语言之间的桥梁。</p><hr><h2 id="4-其它的播放库"><a href="#4-其它的播放库" class="headerlink" title="4. 其它的播放库"></a>4. 其它的播放库</h2><h3 id="4-1-pygame"><a href="#4-1-pygame" class="headerlink" title="4.1 pygame"></a>4.1 pygame</h3><p><a href="https://www.pygame.org/docs/ref/music.html" target="_blank" rel="noopener">pygame中的music</a>模块可以播放音频，但是它对mp3的支持是有限的，部分mp3并不能播放，能播放的有些会变音，不过对wav和ogg是支持的。</p><p>推荐它的原因，主要是可以实现对音频的播放控制，比如音量调节、音频定位、播放暂停、循环播放等。</p><h3 id="4-2-pyglet"><a href="#4-2-pyglet" class="headerlink" title="4.2 pyglet"></a>4.2 pyglet</h3><p><a href="https://pyglet.readthedocs.io/en/pyglet-1.3-maintenance/programming_guide/media.html" target="_blank" rel="noopener">pyglet中的media</a>模块可以播放音频，但是它只支持未压缩的wav格式。</p><p>如果需要支持更多的格式，需要安装<a href="http://avbin.github.io/AVbin/Home/Home.html" target="_blank" rel="noopener">avbin</a>。</p><p>同样也可以实现对音频的控制，比如音量调节、音频定位、播放暂停等。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>如果只是简单的播放音频，选用playsound，它支持大多数的音频格式。如果需要实现一些简单的控制，选用pyglet。</p><blockquote><p><strong>注意：以上的库在播放音频时，都需要加上延时或循环配合播放。</strong></p></blockquote><p>（完）</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
          <category> library </category>
          
      </categories>
      
      
        <tags>
            
            <tag> playsound </tag>
            
            <tag> pygame </tag>
            
            <tag> pyglet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python Ellipsis</title>
      <link href="/2018/05/12/python/advance/ellipsis/"/>
      <url>/2018/05/12/python/advance/ellipsis/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-05-12<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:python@3.6.5" target="_blank" rel="noopener">python@3.6.5</a><br><strong>参考：</strong><br> <a href="https://docs.python.org/3/library/constants.html" target="_blank" rel="noopener">Ellipsis</a><br><strong>分类：</strong> python &gt; advance</p></blockquote><hr><h2 id="1-Ellipsis对象"><a href="#1-Ellipsis对象" class="headerlink" title="1. Ellipsis对象"></a>1. Ellipsis对象</h2><p>Ellipsis对象是python的內建常量。</p><p>Ellipsis对象可以与pass类比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ellipsis表示未定义的内容（空内容）</span><br><span class="line">pass表示空语句</span><br></pre></td></tr></table></figure><p>Ellipsis对象在python中书写为三个点号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><p>以下函数使用pass或Ellipsis对象时都可以达到相同的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><hr><h2 id="2-Ellipsis的作用"><a href="#2-Ellipsis的作用" class="headerlink" title="2. Ellipsis的作用"></a>2. Ellipsis的作用</h2><p>下面开始正式介绍Ellipsis的作用，它主要的作用有两个:</p><h3 id="2-1-用来表示未定义的内容"><a href="#2-1-用来表示未定义的内容" class="headerlink" title="2.1 用来表示未定义的内容"></a>2.1 用来表示未定义的内容</h3><p>上面说到，在定义空函数时，Ellipsis对象和pass语句都能起到相同的作用。</p><p>那么在初始定义一些不确定的变量时，我们除了使用None之外，又多了一种实现的方式，下面两条语句都能达到同样效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = ...</span><br></pre></td></tr></table></figure><h3 id="2-2-用来表示省略的内容"><a href="#2-2-用来表示省略的内容" class="headerlink" title="2.2 用来表示省略的内容"></a>2.2 用来表示省略的内容</h3><p>以下只是其中一个实例，还有更多的表示省略的内容的场景。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [...]]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：Ellipsis对象的布尔值为True</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(...)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>（完）</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
          <category> advance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ellipsis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建个人博客~hugo</title>
      <link href="/2018/05/11/efficiency/hugo/blog/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2~hugo/"/>
      <url>/2018/05/11/efficiency/hugo/blog/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2~hugo/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-05-11<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:hugo@0.40.2" target="_blank" rel="noopener">hugo@0.40.2</a><br><strong>参考：</strong><br><a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener">hugo-quick-start</a><br><strong>分类：</strong> efficiency &gt; hugo</p></blockquote><hr><p>本文介绍hugo的简单使用，安装方式采用brew。</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install hugo</span><br></pre></td></tr></table></figure><hr><h2 id="2-升级"><a href="#2-升级" class="headerlink" title="2. 升级"></a>2. 升级</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade hugo</span><br></pre></td></tr></table></figure><hr><h2 id="3-查看版本"><a href="#3-查看版本" class="headerlink" title="3. 查看版本"></a>3. 查看版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure><hr><h2 id="4-创建新站点"><a href="#4-创建新站点" class="headerlink" title="4. 创建新站点"></a>4. 创建新站点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site iblog</span><br></pre></td></tr></table></figure><p>iblog为我命名的站点，可以自行命名</p><hr><h2 id="5-新增一个主题"><a href="#5-新增一个主题" class="headerlink" title="5. 新增一个主题"></a>5. 新增一个主题</h2><p>创建站点后，默认是没有主题的，需要自行选择并下载主题。</p><p>依次执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> iblog</span><br><span class="line">git init</span><br><span class="line">git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke</span><br></pre></td></tr></table></figure></p><hr><h2 id="6-设置主题"><a href="#6-设置主题" class="headerlink" title="6. 设置主题"></a>6. 设置主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'theme = "ananke"'</span> &gt;&gt; config.toml</span><br></pre></td></tr></table></figure><p>也可以手动打开iblog目录下的config.toml文件，在文件末尾添加theme = “ananke”这一行。</p><hr><h2 id="7-发布新文章"><a href="#7-发布新文章" class="headerlink" title="7. 发布新文章"></a>7. 发布新文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new posts/my-first-post.md</span><br></pre></td></tr></table></figure><p>新建文章my-first-post</p><p>文章内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+++</span><br><span class="line">title = "first"</span><br><span class="line">date = "2015-01-08"</span><br><span class="line">draft = true  # &lt;1&gt;</span><br><span class="line">+++</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># Hello Hugo</span></span><br><span class="line"></span><br><span class="line">First line</span><br><span class="line"></span><br><span class="line">Second line</span><br><span class="line"></span><br><span class="line">Third line</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><1> draft表示草稿状态，如果为true，预览时需要使用hugo server -D，否则使用hugo server。</1></p><p>文章内容也可以是这样的形式，与上等价：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: "first"</span><br><span class="line">date: "2015-01-08"</span><br><span class="line">draft: true  # &lt;1&gt;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># Hello Hugo</span></span><br><span class="line"></span><br><span class="line">First line</span><br><span class="line"></span><br><span class="line">Second line</span><br><span class="line"></span><br><span class="line">Third line</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><1> draft表示草稿状态，如果为true，预览时需要使用hugo server -D，否则使用hugo server。</1></p><hr><h2 id="8-预览"><a href="#8-预览" class="headerlink" title="8. 预览"></a>8. 预览</h2><p>预览时预览草稿，即draft为true的文章：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo server -D</span><br></pre></td></tr></table></figure></p><p>预览时不预览草稿，即draft为false的文章<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo server</span><br></pre></td></tr></table></figure></p><hr><h2 id="9-站点配置"><a href="#9-站点配置" class="headerlink" title="9. 站点配置"></a>9. 站点配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">baseURL = <span class="string">"https://example.org/"</span> <span class="comment"># &lt;1&gt;</span></span><br><span class="line"></span><br><span class="line">languageCode = <span class="string">"en-us"</span>  <span class="comment"># &lt;2&gt;</span></span><br><span class="line"></span><br><span class="line">title = <span class="string">"My New Hugo Site"</span>  <span class="comment"># &lt;3&gt;</span></span><br><span class="line"></span><br><span class="line">theme = <span class="string">"ananke"</span>  <span class="comment"># &lt;4&gt;</span></span><br></pre></td></tr></table></figure><p><1> 首页地址，这里的URL必须为带http/https的完整URL，否则翻页时会出错。</1></p><p><2> 语言编码，中文设置为”zh”</2></p><p><3> 网站标题</3></p><p><4> 网站主题</4></p><hr><h2 id="10-生成静态页面"><a href="#10-生成静态页面" class="headerlink" title="10. 生成静态页面"></a>10. 生成静态页面</h2><ul><li>生成静态页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo</span><br></pre></td></tr></table></figure><ul><li>生成指定url主页的静态页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo --baseUrl=<span class="string">"http://vaporzfy.top/"</span></span><br></pre></td></tr></table></figure><ul><li>生成指定主题的静态页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo --theme=ananke --baseUrl=<span class="string">"http://vaporzfy.top/"</span></span><br></pre></td></tr></table></figure><p>如果在配置文件config.toml中已配置好参数baseUrl和theme，直接使用hugo生成静态页面，运行后，在iblog目录下会生成public文件夹，这就是你可以直接部署到github pages的源文件。</p><hr><h2 id="11-部署"><a href="#11-部署" class="headerlink" title="11. 部署"></a>11. 部署</h2><p>使用git部署，很简单，不赘述。</p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> efficiency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建个人博客~历程</title>
      <link href="/2018/05/10/efficiency/hugo/blog/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2~%E5%8E%86%E7%A8%8B/"/>
      <url>/2018/05/10/efficiency/hugo/blog/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2~%E5%8E%86%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-05-10<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:hugo@0.40.2" target="_blank" rel="noopener">hugo@0.40.2</a><br><strong>参考：</strong><br><a href="http://gohugo.io/" target="_blank" rel="noopener">hugo</a><br><strong>分类：</strong> efficiency &gt; hugo</p></blockquote><hr><p>本笔记也算是个人搭建博客的小记，大概从今年年后开始搭建，从动态到静态，从臃肿到简洁，最终选定一个简洁的静态博客–hugo，今天开始，搭建博客告一段落。</p><p>经历了一些落魄，断更近3年的博客，将会陆续整理更新。</p><p>hugo最终渲染的文章版式还是有走样，原本的空行不见了，内容排版显得拥挤，不过也不怎么影响阅读笔记内容，将就使用。</p><hr><h2 id="1-typecho"><a href="#1-typecho" class="headerlink" title="1. typecho"></a>1. typecho</h2><p>搭建的时候最开始使用的是typecho，这个是简版的wordpress，是一个动态的博客系统，使用markdown语法写作。</p><blockquote><p><strong>亲自搭建并使用过2~3天</strong></p></blockquote><hr><h2 id="2-ghost（node-js）"><a href="#2-ghost（node-js）" class="headerlink" title="2. ghost（node.js）"></a>2. ghost（node.js）</h2><p>然后是ghost，相比typecho，据说这个更精简，不过是国外的，不太符合中国的需求，也是使用markdown语法写作。</p><p>搭建ghost时需要注意，需要安装node.js版本的sql，并进行初始化。</p><blockquote><p><strong>亲自搭建并使用过2~3天</strong></p></blockquote><hr><h2 id="3-firekylin（node-js）"><a href="#3-firekylin（node-js）" class="headerlink" title="3. firekylin（node.js）"></a>3. firekylin（node.js）</h2><p>这是国内的360前端团队编写的，有兴趣的同学尝试一下。 <a href="https://github.com/firekylin/firekylin" target="_blank" rel="noopener">https://github.com/firekylin/firekylin</a></p><blockquote><p><strong>亲自搭建并未使用过</strong></p></blockquote><hr><h2 id="4-wordpress"><a href="#4-wordpress" class="headerlink" title="4. wordpress"></a>4. wordpress</h2><p>第三个使用的是wordpress，同样也是使用markdown语法写作，这么老牌的博客系统为什么现在才用？因为它臃肿。</p><p>不过也是因为臃肿，它有一些关于asciidoc的插件，抱着试一试的心态，使用后发现那些插件都是两三年前的，还没有一点用处。</p><p>于是决定妥协，为此还在百度和腾讯买了自带wordpress的主机。</p><p>最后还是割舍不掉asciidoc，果断弃用。</p><blockquote><p><strong>亲自搭建并使用过2~3天</strong></p></blockquote><hr><h2 id="5-hexo（node-js）"><a href="#5-hexo（node-js）" class="headerlink" title="5. hexo（node.js）"></a>5. hexo（node.js）</h2><p>第四个选用hexo，同样使用markdown语法写作。</p><p>作者来自台湾省。选用它，是因为一个叫做“hexo-renderer-asciidoc”的插件，它可以把asciidoc进行渲染，不过致命的问题就是，这个渲染不带样式。那我就问自己了，要你何用？</p><p>网传hexo口碑不错，网上的教程也很多，输入关键字“hexo github pages”搜索，一大堆这样的教程，这里不多说。</p><p>还是不甘心于只渲染不带样式的asciidoc，经过我多番搜索，找到一个高人的做法，他自己编写js进行渲染，可惜我不懂js，难以折腾，遂放弃。因为之后可能由于主题的更新，还需要进行持续的适配渲染样式，很麻烦。</p><p>他的文章<a href="https://ekyu.moe/article/write-in-asciidoc/" target="_blank" rel="noopener">《使用AsciiDoc写作》</a>，感兴趣的同学参考一下。</p><p>最后关于hexo给大家推荐几个还记得住的好看的主题：</p><ul><li><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">hexo-theme-indigo</a></li><li><a href="https://github.com/Molunerfinn/hexo-theme-melody" target="_blank" rel="noopener">hexo-theme-melody</a></li><li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a></li></ul><blockquote><p><strong>亲自搭建并部署github pages上使用过6~7天</strong></p></blockquote><hr><h2 id="6-hugo（go）"><a href="#6-hugo（go）" class="headerlink" title="6. hugo（go）"></a>6. hugo（go）</h2><p>最后一个，也就是我现在使用的博客系统。</p><p>以上弃用的原因都是因为不能很好的支持asciidoc语法，而我对这个很偏爱，很偏爱。所以不能没有它。</p><p>吸引我使用hugo的是这个 <a href="https://gohugo.io/content-management/formats/" target="_blank" rel="noopener">Supported Content Formats</a> ，hugo使用原生的asciidoc或asciidoctor进行渲染，可想而知，肯定比插件的效果好。于是试了一下，发现依然不带样式。</p><p>由于一开始使用二进制安装，所以只能查看源代码，发现关于渲染部分的是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">asciidoc: --no-header-footer --safe -  </span><br><span class="line">asciidoctor: --no-header-footer --safe --trace -</span><br><span class="line">rst2html: --leave-comments --initial-header-level=2</span><br><span class="line">pandoc: --mathjax</span><br></pre></td></tr></table></figure><p>于是查了一下asciidoctor的官方文档，发现–no-header-footer参数渲染输出的html无样式。</p><p>于是决定使用源码编译安装，结果遇到两个问题：</p><ol><li><p>timeout</p><p> go get配置所需模块时，时常timeout（大天朝网络的原因）</p><p> 解决办法：设置代理后，go get报错。所以使用笨方法，手动去github等等网站一个一个下载。</p></li><li><p>链接出错</p><p> 所需包go get完成之后，cd到源码目录下，配置GOPATH。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=$(<span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure><p>开始编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -o hugo main.go</span><br></pre></td></tr></table></figure><p>然后报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">clang-4.0: error: linker <span class="built_in">command</span> failed with <span class="built_in">exit</span> code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure><p>这个链接出的错，暂时还未解决，于是采用曲线救国方式，改用goland编译后，错误解决。</p><p>菜单栏依次点击 run ▸ edit configuration ▸ + ▸ go build，新增一个go build。</p><p>配置如下：</p><img src="http://pbontyvwb.bkt.clouddn.com/images/efficiency/hugo/blog/go-build.png"><p>然后使用新增加的run运行程序，在设置的目录下就会有编译链接好的二进制文件hugo输出。</p><blockquote><p><strong>注意：不新增go build的话，点击run只会运行程序，没有编译链接后的二进制文件产出。</strong></p></blockquote><p>当时我以为如果修改（去掉）asciidoctor的参数“–no-header-footer”就可以生成带样式的html文件，结果证明，我天真了，依然行不通。</p><p>不过我决定采用自行输出的html作为文章源文件，此法可行。</p><p>目前在用~~</p><hr><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h2><p>如果喜欢采用markdown语法写作，优选hexo，简洁高效、主题多。</p><p>构建时hugo比hexo高效，但是主题很少。</p><p>毕竟内容才是主要的，博客系统只是内容的载体而已。</p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> efficiency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asciidoctor-reveal.js的简单使用</title>
      <link href="/2018/04/21/efficiency/asciidoc/asciidoctor-reveal.js/"/>
      <url>/2018/04/21/efficiency/asciidoc/asciidoctor-reveal.js/</url>
      <content type="html"><![CDATA[<p><strong>请根据笔记的写作日期，选择性阅读。</strong></p><blockquote><p><strong>作者：</strong> <a href="http://vaporzfy.top/">vaporzfy</a><br><strong>写作日期：</strong> 2018-04-15<br><strong>系统：</strong> Mac<br><strong>软件版本：</strong><br><a href="mailto:node@9.11.1" target="_blank" rel="noopener">node@9.11.1</a><br><a href="mailto:asciidoctor-reveal.js@1.1.3" target="_blank" rel="noopener">asciidoctor-reveal.js@1.1.3</a><br><strong>参考：</strong><br><a href="https://github.com/asciidoctor/asciidoctor-reveal.js" target="_blank" rel="noopener">asciidoctor-reveal.js</a><br><strong>分类：</strong> efficiency &gt; asciidoc</p></blockquote><hr><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>不会nodejs，尝试过全局安装，未果。以下采用本地安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save asciidoctor-reveal.js</span><br></pre></td></tr></table></figure><hr><h2 id="2-简单使用"><a href="#2-简单使用" class="headerlink" title="2. 简单使用"></a>2. 简单使用</h2><ol><li><p>新建文件asciidoctor-revealjs.js，内容如下：</p><blockquote><p>asciidoctor-revealjs.js</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Load asciidoctor.js and asciidoctor-reveal.js</span></span><br><span class="line"><span class="keyword">var</span> asciidoctor = <span class="built_in">require</span>(<span class="string">'asciidoctor.js'</span>)();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'asciidoctor-reveal.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert the document 'presentation.adoc' using the reveal.js converter</span></span><br><span class="line"><span class="keyword">var</span> attributes = &#123;<span class="string">'revealjsdir'</span>: <span class="string">'node_modules/reveal.js@'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> options = &#123;<span class="attr">safe</span>: <span class="string">'safe'</span>, <span class="attr">backend</span>: <span class="string">'revealjs'</span>, <span class="attr">attributes</span>: attributes&#125;;</span><br><span class="line">asciidoctor.convertFile(<span class="string">'presentation.ad'</span>, options); <span class="comment">// &lt;1&gt;</span></span><br></pre></td></tr></table></figure><p> <1> presentation.ad为你需要转换的ad文件</1></p></li></ol><ol start="2"><li><p>新建presentation.ad文件，内容如下：</p><blockquote><p>presentation.ad</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">= Title Slide</span><br><span class="line"></span><br><span class="line">== Slide One</span><br><span class="line"></span><br><span class="line">* Foo</span><br><span class="line">* Bar</span><br><span class="line">* World</span><br></pre></td></tr></table></figure></li><li><p>执行上一步编写的js文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node asciidoctor-revealjs.js</span><br></pre></td></tr></table></figure><p> 之后在当前目录下就会生成一个渲染后的与ad文件同名的html文件，上面例子生成的文件为presentation.html。运行该html文件就能预览到幻灯片的效果。</p><blockquote><p><strong>注意：该文件不能脱离当前目录运行，它依赖node_modules下的reveal.js。</strong></p></blockquote></li></ol><hr><h2 id="3-常见的语法设置"><a href="#3-常见的语法设置" class="headerlink" title="3. 常见的语法设置"></a>3. 常见的语法设置</h2><h3 id="3-1-隐藏标题"><a href="#3-1-隐藏标题" class="headerlink" title="3.1 隐藏标题"></a>3.1 隐藏标题</h3><ol><li><p>设置标题为!</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">== !</span><br><span class="line"></span><br><span class="line"> !</span><br><span class="line">这一页我没有标题</span><br></pre></td></tr></table></figure></li><li><p>增加notitle属性</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[%notitle]</span><br><span class="line">== 我是标题</span><br><span class="line"></span><br><span class="line">notitle</span><br><span class="line">这一页我没有标题</span><br></pre></td></tr></table></figure></li><li><p>增加conceal属性</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[%conceal]</span><br><span class="line">== 我是标题</span><br><span class="line"></span><br><span class="line">conceal</span><br><span class="line">这一页我没有标题</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：notitle只可对单一页面设置，一级标题也是一个单一页面。</strong></p></blockquote></li></ol><h3 id="3-2-背景颜色"><a href="#3-2-背景颜色" class="headerlink" title="3.2 背景颜色"></a>3.2 背景颜色</h3><ol><li><p>单一页面<br>通过background-color属性设置该页的背景颜色，设置后，相应的字体颜色也会改变为不影响阅读字体颜色。比如，红色背景-白色字体。</p></li><li><p>所有页面<br>如果设置在一级标题下，将会应用于所有幻灯片，但是如果二级标题有设置背景颜色，则生效的是二级标题的背景颜色。（可以类比编程中的全局变量和局部变量）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[background-color=&quot;yellow&quot;] // &lt;1&gt;</span><br><span class="line">== Slide Three</span><br><span class="line"></span><br><span class="line">Is very yellow</span><br></pre></td></tr></table></figure><p> <1> 通过颜色字符串设置背景颜色 </1></p></li></ol><h3 id="3-3-背景图片"><a href="#3-3-背景图片" class="headerlink" title="3.3 背景图片"></a>3.3 背景图片</h3><p>通过background-image属性设置该页的背景图片，默认的字体颜色为白色，默认采用cover的全屏方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">== 背景图片</span><br><span class="line"></span><br><span class="line">Is very red</span><br><span class="line"></span><br><span class="line">image::001.jpg[background, size=&quot;200px 200px&quot;, repeat=&quot;repeat&quot;] // &lt;1&gt;</span><br></pre></td></tr></table></figure><p><1> background可使用关键字canvas替代，将图片大小设置为200*200，重复的平铺方式。</1></p><p>可以设置的属性有：</p><p>表X.背景图标的属性</p><table><thead><tr><th>属性</th><th>可选值</th><th>示例</th><th>作用</th></tr></thead><tbody><tr><td>size</td><td>cover, contain</td><td>size=”200px 200px”</td><td>设置图片大小，默认为cover的全屏方式</td></tr><tr><td>position</td><td></td><td>设置未成功生效</td><td>设置图片位置</td></tr><tr><td>repeat</td><td>norepeat, repeat</td><td>repeat=”repeat”</td><td>重复图片</td></tr></tbody></table><blockquote><p><strong>注意：</strong></p><p><strong>1. 背景图片的相对路径依赖于imagedir属性的设置。</strong><br><strong>2. background可使用关键字canvas替代。</strong><br><strong>3. 设置图片属性的关键字没有前缀background。</strong><br><strong>4. 目前设置只针对单一页面生效，所有页面的设置方法还未找到。</strong><br><strong>5. position属性设置并未生效，不知道是不是我设置的不对。</strong></p></blockquote><h3 id="3-4-背景视频"><a href="#3-4-背景视频" class="headerlink" title="3.4 背景视频"></a>3.4 背景视频</h3><p>通过background-video属性设置该页的背景视频，默认的字体颜色为白色，默认采用cover的全屏方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[background-video=&quot;001.mp4&quot;,background-video-loop=true,background-video-muted=true] // &lt;1&gt;</span><br><span class="line">== 背景视频</span><br></pre></td></tr></table></figure><p><1> 设置视频为循环播放，且没有声音。上例中的属性设置可以简写为options=”loop,muted”。</1></p><p>可以设置的属性有：<br>表X.背景图片的属性</p><table><thead><tr><th>属性</th><th>可选值</th><th>示例</th><th>作用</th></tr></thead><tbody><tr><td>size</td><td>cover, contain</td><td>size=cover</td><td>设置视频大小，默认为cover的全屏方式</td></tr><tr><td>loop</td><td>True,false</td><td>background-video-loop=true</td><td>设置视频循环播放</td></tr><tr><td>muted</td><td>true, false</td><td>background-video-muted=true</td><td>设置视频是否需要声音</td></tr></tbody></table><blockquote><p><strong>注意：设置视频属性的关键字没有前缀background。</strong></p></blockquote><h3 id="3-5-Background-iframes"><a href="#3-5-Background-iframes" class="headerlink" title="3.5 Background iframes"></a>3.5 Background iframes</h3><p>通过background-iframe属性设置，具体的没有做过尝试。</p><h3 id="3-6-过渡效果"><a href="#3-6-过渡效果" class="headerlink" title="3.6 过渡效果"></a>3.6 过渡效果</h3><ol><li><p>切换效果</p><p>通过属性transition设置，可设置的值为zoom、slide、slide-in fade-out等。</p></li><li><p>切换速度</p><p>通过属性transition-speed设置，可设置的值为default、fast、slow等。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[transition=zoom]</span><br><span class="line">== 切换效果</span><br><span class="line"></span><br><span class="line">使用zoom效果切换</span><br><span class="line"></span><br><span class="line">[transition-speed=fast]</span><br><span class="line">== 切换速度</span><br><span class="line"></span><br><span class="line">使用fast速度切换</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-7-逐条显示"><a href="#3-7-逐条显示" class="headerlink" title="3.7 逐条显示"></a>3.7 逐条显示</h3><p>通过属性.step或%step设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">== 逐步显示</span><br><span class="line"></span><br><span class="line">[.step]</span><br><span class="line">* Foo</span><br><span class="line">* Bar</span><br><span class="line">* World</span><br></pre></td></tr></table></figure><h3 id="3-8-Stretch"><a href="#3-8-Stretch" class="headerlink" title="3.8 Stretch"></a>3.8 Stretch</h3><p>尽可能的使某一元素多占空间，比如图片、视频等等。</p><h3 id="3-9-插入视频"><a href="#3-9-插入视频" class="headerlink" title="3.9 插入视频"></a>3.9 插入视频</h3><p>属性同asciidoc的video。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">== 插入视频</span><br><span class="line"></span><br><span class="line">video::kZH9JtPBq7k[youtube, start=34, options=autoplay]</span><br></pre></td></tr></table></figure><h3 id="3-10-语法高亮"><a href="#3-10-语法高亮" class="headerlink" title="3.10 语法高亮"></a>3.10 语法高亮</h3><p>通过属性source-highlighter设置，reveal.js默认支持highlightjs，其它风格不确定是否支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= 设置语法高亮风格</span><br><span class="line">:source-highlighter: highlightjs</span><br></pre></td></tr></table></figure><h3 id="3-11-幻灯片布局"><a href="#3-11-幻灯片布局" class="headerlink" title="3.11 幻灯片布局"></a>3.11 幻灯片布局</h3><ol><li><p>水平布局 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==</span><br></pre></td></tr></table></figure></li><li><p>垂直布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">===</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-12-Title-slide-customization"><a href="#3-12-Title-slide-customization" class="headerlink" title="3.12 Title slide customization"></a>3.12 Title slide customization</h3><p>The title slide is customized via Asciidoc attributes. These are the global variable assigned at the top of a document under the lead title that look like this: :name: value.</p><p>This converter supports changing the color, image, video, iframe and transitions of the title slide.</p><p>Read the relevant reveal.js documentation to understand what attributes need to be set. Keep in mind that for title slides you must replace data- with title-slide-.</p><p>See title-slide-image.adoc.</p><p>The title slide is also added a title CSS class to help with template customization.</p><h3 id="3-13-Admonitions"><a href="#3-13-Admonitions" class="headerlink" title="3.13 Admonitions"></a>3.13 Admonitions</h3><p>全局属性设置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:icons: font</span><br></pre></td></tr></table></figure></p><p>设置后才能使用Admonitions图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">== 图标</span><br><span class="line"></span><br><span class="line">TIP: icons slide</span><br></pre></td></tr></table></figure><hr><h2 id="4-Reveal-js-Options"><a href="#4-Reveal-js-Options" class="headerlink" title="4. Reveal.js Options"></a>4. Reveal.js Options</h2><p>详见<a href="https://github.com/asciidoctor/asciidoctor-reveal.js/#revealjs-options" target="_blank" rel="noopener">Reveal.js Options</a></p><p>&lt;完&gt;</p>]]></content>
      
      <categories>
          
          <category> efficiency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asciidoc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018，先来一口鸡汤</title>
      <link href="/2018/04/20/soup/2018/2018/"/>
      <url>/2018/04/20/soup/2018/2018/</url>
      <content type="html"><![CDATA[<h1 id="关于努力"><a href="#关于努力" class="headerlink" title="关于努力"></a>关于努力</h1><ol><li><p>你必须非常努力，才能相信自己真的是无能为力。</p></li><li><p>努力不一定能成功，但是不努力一定很轻松！</p></li><li><p>比你优秀的人还在努力，你努力还有什么用。</p></li><li><p>有时候你不努力一把，你都不知道什么是绝望。</p></li><li><p>我每天拼了命的努力，就是为了向那些看不起我的人证明，他们是对的。</p></li></ol>]]></content>
      
      <categories>
          
          <category> soup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 努力 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/15/other/hello/"/>
      <url>/2018/04/15/other/hello/</url>
      <content type="html"><![CDATA[<h2 id="vaporzfy’Notes"><a href="#vaporzfy’Notes" class="headerlink" title="vaporzfy’Notes"></a>vaporzfy’Notes</h2><ul><li>互联网的小蜜蜂，不务正业的程序员。</li><li>热衷于新技术，同时也怀旧。</li></ul><p>==</p><h2 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h2><ul><li>今天是2018年04月15日！</li><li>这是我建站的第一篇笔记！</li><li>笔记在两年的停更后即将开始更新，同时旧文将由<a href="https://blog.csdn.net/g_ithot" target="_blank" rel="noopener">CSDN</a>迁移过来。</li></ul><p>==</p><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><ul><li>Hello World! </li><li>分享是一种美德！</li><li>希望我的笔记可以给你帮助！</li></ul><p>==</p><p><a href="http://vaporzfy.top">返回首页-vaporzfy’s Notes</a></p>]]></content>
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
